apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return PUBLISH_VERSION.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://central.sonatype.com/repository/maven-snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('nexusPassword') ? nexusPassword : ""
}

def configurePom(pom) {
    pom.name = POM_NAME
    pom.packaging = POM_PACKAGING
    pom.description = POM_DESCRIPTION
    pom.url = POM_URL

    pom.scm {
        url = POM_SCM_URL
        connection = POM_SCM_CONNECTION
        developerConnection = POM_SCM_DEV_CONNECTION
    }

    pom.licenses {
        license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
            distribution = POM_LICENCE_DIST
        }
    }

    pom.developers {
        developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
        }
    }
}

//subprojects {
    afterEvaluate {
//        println("Available components:")
//        project.components.each { component ->
//            println("component:" + component.name)
//        }
        if (project.components.findByName('release') == null) {
            throw new GradleException("Release component not found in components container.")
        }

        // To avoid publishing of the applications inside the project ..
        if (!plugins.hasPlugin("android")) {
            publishing {
                publications {
                    android(MavenPublication) {
                        // Applies the component for the release build variant.
//                        from components.release

                        groupId = PUBLISH_GROUP_ID
                        artifactId = POM_ARTIFACT_ID
                        version = PUBLISH_VERSION

                        configurePom(pom)
                    }
                }
                repositories {
                    maven {
                        name "mavenCentral"
                        //url getReleaseRepositoryUrl()
                        def releasesRepoUrl = getReleaseRepositoryUrl()
                        def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                        url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                        credentials(PasswordCredentials) {
                            username = getRepositoryUsername()
                            password = getRepositoryPassword()
                        }
                    }
                }
            }

            if (project.getPlugins().hasPlugin('com.android.application') ||
                    project.getPlugins().hasPlugin('com.android.library')) {

                task androidJavadocs(type: Javadoc) {
                    source = android.sourceSets.main.java.source
                    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                    excludes = ['**/*.kt']
                }

                task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                    archiveClassifier = 'javadoc'
                    from androidJavadocs.destinationDir
                }

                task androidSourcesJar(type: Jar) {
                    archiveClassifier = 'sources'
                    from android.sourceSets.main.java.source
                }
            }

            if (JavaVersion.current().isJava8Compatible()) {
                allprojects {
                    tasks.withType(Javadoc) {
                        options.addStringOption('Xdoclint:none', '-quiet')
                    }
                }
            }

            if (JavaVersion.current().isJava9Compatible()) {
                allprojects {
                    tasks.withType(Javadoc) {
                        options.addBooleanOption('html5', true)
                    }
                }
            }

            artifacts {
                if (project.getPlugins().hasPlugin('com.android.application') ||
                        project.getPlugins().hasPlugin('com.android.library')) {
                    archives androidSourcesJar
                    archives androidJavadocsJar
                }
            }

            android.libraryVariants.all { variant ->
                tasks.androidJavadocs.doFirst {
                    classpath += files(variant.javaCompileProvider.get().classpath.files.join(File.pathSeparator))
                }
            }

//            publishing.publications.all { publication ->
//                publication.groupId = PUBLISH_GROUP_ID
//                publication.version = PUBLISH_VERSION
//                // publication.artifact androidSourcesJar
//                // publication.artifact androidJavadocsJar
//
//                configurePom(publication.pom)
//            }
            signing {
                publishing.publications.configureEach { publication ->
                    sign publication
                }
            }
        }
    }
//}

//Publish the artifacts to the staging repository: ./gradlew publishToSonatype
//Close the staging repository: ./gradlew findSonatypeStagingRepository closeSonatypeStagingRepository
//Release the staging repository: ./gradlew findSonatypeStagingRepository releaseSonatypeStagingRepository
//(in the above example, steps 1 and 2 could be also combined into ./gradlew publishToSonatype closeSonatypeStagingRepository, to make only the releasing done in a separate step)
