// apply the plugin with its class name rather than its Id to work around gradle limitation of
// not being able to find the plugin by Id despite the dependencies being added right above. Gradle
// is currently not capable of loading plugins by Id if the dependency is anywhere else than
// in the main project build.gradle. This file is "imported" into the project's build.gradle
// through a "apply from:".
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

project.ext.group = 'com.smart'
project.ext.archivesBaseName = 'irecyclerview-swiperefresh'
project.ext.version = '0.0.1'
project.ext.pomDesc = 'IRecyclerView swipeRefresh framework Android library'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    failOnError false //必须添加以免出错
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        library(MavenPublication) {
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)

                    //        // for exclusions
                    //        if (it.excludeRules.size() > 0 ) {
                    //            def exclusions = dependencyNode.appendNode('exclusions')
                    //            it.excludeRules.each { ExcludeRule ex ->
                    //                def exclusion = exclusions.appendNode('exclusion')
                    //                exclusion.appendNode('groupId', ex.group)
                    //                exclusion.appendNode('artifactId', ex.module)
                    //            }
                    //        }
                }
            }

            groupId project.ext.group
            artifactId project.ext.archivesBaseName
            version project.ext.version

            // Release AAR, Sources, and JavaDoc
            artifact "$buildDir/outputs/aar/irecyclerview-swiperefresh-release.aar"
            artifact sourcesJar
            artifact javadocJar
        }
    }
}


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = System.getenv("BINTRAY_USER")  // user = "$System.env.BINTRAY_USER"
    key = System.getenv("BINTRAY_APIKEY") // key = "$System.env.BINTRAY_APIKEY"
    println(user + "," + key)
    if (user == "null" || user == null || key == null) {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
    }

    publications = ['library']

    publish = project.hasProperty("release")
    pkg {
        //userOrg = 'android'
        repo = 'maven'
        group = project.ext.group
        name = project.ext.archivesBaseName
        desc = project.ext.pomDesc
        licenses = ['Apache-2.0']
        websiteUrl = 'https://tools.android.com'
        issueTrackerUrl = 'https://code.google.com/p/android/'
        vcsUrl = 'https://android.googlesource.com/platform/frameworks/volley.git'
        labels = ['android', 'irecyclerview', 'framework']
        publicDownloadNumbers = true

        version {
            name = project.ext.version
            desc = project.ext.pomDesc + ' version ' + project.ext.version
            gpg {
                sign = false
                passphrase = System.env.GPG_PASSPHRASE
            }
        }
    }
}
